# Default
style.cpp.32=$(tstyle.default)
# White space
style.cpp.0=$(tstyle.whitespace)
# Comment: /* */.
style.cpp.1=$(tstyle.comment.box)
# Line Comment: //.
style.cpp.2=$(tstyle.comment.line)
# Doc comment: block comments beginning with /** or /*!
style.cpp.3=$(tstyle.comment.doc)
# Number
style.cpp.4=$(tstyle.number)
# Keyword
style.cpp.5=$(tstyle.keyword)
# String
style.cpp.6=$(tstyle.string.double)
# Character
style.cpp.7=$(tstyle.number)
# UUIDs (only in IDL)
style.cpp.8=$(tstyle.support)
# Preprocessor
style.cpp.9=$(tstyle.preprocessor)
# Operators
style.cpp.10=$(tstyle.operator)
# Identifiers
style.cpp.11=
# End of line where string is not closed
style.cpp.12=$(tstyle.mismatch)
# Verbatim strings for C#
style.cpp.13=$(tstyle.string.other)
# Regular expressions for JavaScript
style.cpp.14=$(tstyle.string.other)
# Doc Comment Line: line comments beginning with /// or //!.
style.cpp.15=$(tstyle.comment.doc)
# Keywords2
style.cpp.16=$(tstyle.support)
# Comment keyword
style.cpp.17=$(tstyle.function)
# Comment keyword error
style.cpp.18=$(tstyle.variable)
# Global class
style.cpp.19=$(tstyle.class)
# Raw strings for C++0x
style.cpp.20=$(tstyle.string.other)
# Triple-quoted strings for Vala
style.cpp.21=$(tstyle.string.other)
# Hash-quoted strings for Pike
style.cpp.22=$(tstyle.string.other)
# Preprocessor stream comment
style.cpp.23=$(tstyle.comment.box)
# Preprocessor stream doc comment
style.cpp.24=$(tstyle.comment.doc)
# User defined literals
style.cpp.25=$(tstyle.variable)
# Task Marker
style.cpp.26=$(tstyle.support)
# Escape sequence
style.cpp.27=$(tstyle.support)

# Inactive states are 64 greater than their active counterparts

# White space
style.cpp.64=$(style.cpp.0),back:#{{base01-hex}}
# Comment: /* */.
style.cpp.65=$(style.cpp.1),back:#{{base01-hex}}
# Line Comment: //.
style.cpp.66=$(style.cpp.2),back:#{{base01-hex}}
# Doc comment: block comments beginning with /** or /*!
style.cpp.67=$(style.cpp.3),back:#{{base01-hex}}
# Number
style.cpp.68=$(style.cpp.4),back:#{{base01-hex}}
# Keyword
style.cpp.69=$(style.cpp.5),back:#{{base01-hex}}
# Double quoted string
style.cpp.70=$(style.cpp.6),back:#{{base01-hex}}
# Single quoted string
style.cpp.71=$(style.cpp.7),back:#{{base01-hex}}
# UUIDs (only in IDL)
style.cpp.72=$(style.cpp.8),back:#{{base01-hex}}
# Preprocessor
style.cpp.73=$(style.cpp.9),back:#{{base01-hex}}
# Operators
style.cpp.74=$(style.cpp.10),back:#{{base01-hex}}
# Identifiers
style.cpp.75=$(style.cpp.11),back:#{{base01-hex}}
# End of line where string is not closed
style.cpp.76=$(style.cpp.12),back:#{{base01-hex}}
# Verbatim strings for C#
style.cpp.77=$(style.cpp.13),back:#{{base01-hex}}
# Regular expressions for JavaScript
style.cpp.78=$(style.cpp.14),back:#{{base01-hex}}
# Doc Comment Line: line comments beginning with /// or //!.
style.cpp.79=$(style.cpp.15),back:#{{base01-hex}}
# Keywords2
style.cpp.80=$(style.cpp.16),back:#{{base01-hex}}
# Comment keyword
style.cpp.81=$(style.cpp.17),back:#{{base01-hex}}
# Comment keyword error
style.cpp.82=$(style.cpp.18),back:#{{base01-hex}}
# Global class
style.cpp.83=$(style.cpp.19),back:#{{base01-hex}}
# Raw strings for C++0x
style.cpp.84=$(style.cpp.20),back:#{{base01-hex}}
# Triple-quoted strings for Vala
style.cpp.85=$(style.cpp.21),back:#{{base01-hex}}
# Hash-quoted strings for Pike
style.cpp.86=$(style.cpp.22),back:#{{base01-hex}}
# Preprocessor stream comment
style.cpp.87=$(style.cpp.23),back:#{{base01-hex}}
# Preprocessor stream doc comment
style.cpp.88=$(style.cpp.24),back:#{{base01-hex}}
# User defined literals
style.cpp.89=$(style.cpp.25),back:#{{base01-hex}}
# Task Marker
style.cpp.90=$(style.cpp.26),back:#{{base01-hex}}