
# Fold
fold.margin.colour=#{{base00-hex}}
fold.margin.highlight.colour=#{{base01-hex}}

# Caret
caret.fore=#{{base05-hex}}
caret.line.back=#{{base05-hex}}
caret.line.back.alpha=20

# Edge
edge.colour=#{{base02-hex}}


# Selection (remove fore)
selection.fore=
selection.back=#{{base05-hex}}
selection.alpha=80
# color for additional selections
#selection.additional.fore=
#selection.additional.back=
#selection.additional.alpha=256

# Whitespace, error, bookmark, etc.
whitespace.fore=#{{base02-hex}}
whitespace.back=
#error.marker.fore=#0000A0
#error.marker.back=#DADAFF
#bookmark.fore=#BE0000
#bookmark.back=#FFFFA0
#bookmark.alpha=
#find.mark=#0000FF
#find.mark.indicator=style:compositionthick,colour:#FFB700,under
highlight.current.word.colour=#{{base03-hex}}
highlight.current.word.indicator=style:straightbox,colour:#{{base03-hex}},under,outlinealpha:120,fillalpha:40
#indicators.alpha=63
#find.indicator.incremental=style:compositionthick,colour:#FFB700,under

# Output
style.errorlist.32=back:#{{base00-hex}}
style.errorlist.0=fore:#{{base05-hex}}

#############################################
# [Global default styles for all languages] #
#############################################
# Default
style.*.32=$(font.base),fore:#{{base05-hex}},back:#{{base00-hex}}
# Line number
style.*.33=$(font.base),fore:#{{base04-hex}},back:#{{base01-hex}}
# Brace highlight
style.*.34=fore:#{{base0D-hex}},bold
# Brace incomplete highlight
style.*.35=fore:#{{base08-hex}},bold
# Control characters
style.*.36=
# Indentation guides
style.*.37=fore:#{{base03-hex}}
# Calltips
style.*.38=fore:#{{base03-hex}}

# Whitespace/Default
style.*.0=$(style.*.32)
# Block comment
style.*.1=$(font.code.comment.box),fore:#{{base03-hex}}
# Line comment
style.*.2=$(font.code.comment.line),fore:#{{base03-hex}}
# Doc comment
style.*.3=$(style.*.1)
# Number
style.*.4=fore:#{{base09-hex}}
# Keyword
style.*.5=fore:#{{base0E-hex}}
# Double quoted string
style.*.6=fore:#{{base0B-hex}}
# Single quoted string/Character
style.*.7=fore:#{{base0B-hex}}
# Literal string
style.*.8=fore:#{{base0C-hex}}
# Preprocessor
style.*.9=fore:#{{base0A-hex}}
# Operators
style.*.10=fore:#{{base05-hex}}
# Identifier (everything else...)
style.*.11=
# End of line where string is not closed
style.*.12=back:#{{base0F-hex}},eolfilled

################
# [Lua styles] #
################

#Default
style.lua.32=$(style.*.32)
# White space: Visible only in View Whitespace mode (or if it has a back colour)
style.lua.0=fore:$(whitespace.fore)
# Block comment (Lua 5.0)
style.lua.1=$(style.*.1)
# Line comment
style.lua.2=$(style.*.2)
# Doc comment -- Not used in Lua (yet?)
style.lua.3=$(style.*.3)
# Number
style.lua.4=$(style.*.4)
# Keyword
style.lua.5=$(style.*.5)
# (Double quoted) String
style.lua.6=$(style.*.6)
# Character (Single quoted string)
style.lua.7=$(style.*.7)
# Literal string
style.lua.8=$(style.*.8)
# Preprocessor (obsolete in Lua 4.0 and up)
style.lua.9=$(style.*.9)
# Operators
style.lua.10=$(style.*.10)
# Identifier (everything else...)
style.lua.11=
# End of line where string is not closed
style.lua.12=$(style.*.12)
# Other keywords (bozo test colors, but toned down ;)
style.lua.13=$(style.lua.5)
style.lua.14=$(style.lua.5)
style.lua.15=$(style.lua.5)
style.lua.16=$(style.lua.5)
style.lua.17=$(style.lua.5)
style.lua.18=$(style.lua.5)
style.lua.19=$(style.lua.5)
# Labels
style.lua.20=fore:#{{base08-hex}}

#######################
# [Properties styles] #
#######################

# Default
style.props.0=$(style.*.0)
# Comment
style.props.1=$(style.*.1)
# Section
style.props.2=$(style.*.8)
# Assignment operator
style.props.3=$(style.*.10)
# Default value (@)
style.props.4=$(style.*.9)
# Key
style.props.5=$(style.*.5)
# Matched Operators
style.props.34=$(style.lua.34)
style.props.35=$(style.lua.35)

################
# [C++ styles] #
################

# Default
style.cpp.32=$(style.*.32)
# White space
style.cpp.0=fore:$(whitespace.fore)
# Comment: /* */.
style.cpp.1=$(style.*.1)
# Line Comment: //.
style.cpp.2=$(style.*.2)
# Doc comment: block comments beginning with /** or /*!
style.cpp.3=$(style.*.3)
# Number
style.cpp.4=$(style.*.4)
# Keyword
style.cpp.5=$(style.*.5)
# String
style.cpp.6=$(style.*.6)
# Character
style.cpp.7=$(style.*.4)
# UUIDs (only in IDL)
style.cpp.8=$(style.*.8)
# Preprocessor
style.cpp.9=$(style.*.9)
# Operators
style.cpp.10=$(style.*.10)
# Identifiers
style.cpp.11=
# End of line where string is not closed
style.cpp.12=$(style.*.12)
# Verbatim strings for C#
style.cpp.13=$(style.*.8)
# Regular expressions for JavaScript
style.cpp.14=$(style.*.8)
# Doc Comment Line: line comments beginning with /// or //!.
style.cpp.15=$(style.*.3)
# Keywords2
style.cpp.16=fore:#{{base08-hex}}
# Comment keyword
style.cpp.17=fore:#{{base0D-hex}}
# Comment keyword error
style.cpp.18=fore:#{{base08-hex}}
# Global class
style.cpp.19=fore:#{{base0A-hex}}
# Raw strings for C++0x
style.cpp.20=$(style.*.6)
# Triple-quoted strings for Vala
style.cpp.21=$(style.*.6)
# Hash-quoted strings for Pike
style.cpp.22=$(style.*.6)
# Preprocessor stream comment
style.cpp.23=$(style.*.3)
# Preprocessor stream doc comment
style.cpp.24=$(style.*.3)
# User defined literals
style.cpp.25=fore:#{{base08-hex}}
# Task Marker
style.cpp.26=$(style.*.3)
# Escape sequence
style.cpp.27=$(style.*.6)

# Inactive states are 64 greater than their active counterparts

# White space
style.cpp.64=$(style.cpp.0),back:#{{base01-hex}}
# Comment: /* */.
style.cpp.65=$(style.cpp.1),back:#{{base01-hex}}
# Line Comment: //.
style.cpp.66=$(style.cpp.2),back:#{{base01-hex}}
# Doc comment: block comments beginning with /** or /*!
style.cpp.67=$(style.cpp.3),back:#{{base01-hex}}
# Number
style.cpp.68=$(style.cpp.4),back:#{{base01-hex}}
# Keyword
style.cpp.69=$(style.cpp.5),back:#{{base01-hex}}
# Double quoted string
style.cpp.70=$(style.cpp.6),back:#{{base01-hex}}
# Single quoted string
style.cpp.71=$(style.cpp.7),back:#{{base01-hex}}
# UUIDs (only in IDL)
style.cpp.72=$(style.cpp.8),back:#{{base01-hex}}
# Preprocessor
style.cpp.73=$(style.cpp.9),back:#{{base01-hex}}
# Operators
style.cpp.74=$(style.cpp.10),back:#{{base01-hex}}
# Identifiers
style.cpp.75=$(style.cpp.11),back:#{{base01-hex}}
# End of line where string is not closed
style.cpp.76=$(style.cpp.12),fore:#000000
# Verbatim strings for C#
style.cpp.77=$(style.cpp.13),fore:#90B090
# Regular expressions for JavaScript
style.cpp.78=$(style.cpp.14),fore:#7FAF7F
# Doc Comment Line: line comments beginning with /// or //!.
style.cpp.79=$(style.cpp.15),fore:#C0C0C0
# Keywords2
style.cpp.80=$(style.cpp.16),fore:#C0C0C0
# Comment keyword
style.cpp.81=$(style.cpp.17),fore:#C0C0C0
# Comment keyword error
style.cpp.82=$(style.cpp.18),fore:#C0C0C0
# Global class
style.cpp.83=$(style.cpp.19),fore:#{{base0A-hex}}
# Raw strings for C++0x
style.cpp.84=$(style.cpp.20),fore:#B090B0
# Triple-quoted strings for Vala
style.cpp.85=$(style.cpp.21),fore:#90B090
# Hash-quoted strings for Pike
style.cpp.86=$(style.cpp.22),fore:#90B090
# Preprocessor stream comment
style.cpp.87=$(style.cpp.23),fore:#A0C090
# Preprocessor stream doc comment
style.cpp.88=$(style.cpp.23),fore:#C0C0C0
# User defined literals
style.cpp.89=fore:#D7A090
# Task Marker
style.cpp.90=fore:#C3A1CF,$(font.code.comment.line)
