##################################################
# [editor.properties]
##################################################

# Fold
fold.margin.colour=#{{base00-hex}}
fold.margin.highlight.colour=#{{base01-hex}}

# Caret
caret.fore=#{{base05-hex}}
caret.line.back=#{{base05-hex}}
caret.line.back.alpha=20

# Edge
edge.colour=#{{base02-hex}}

# Selection (remove fore)
selection.fore=
selection.back=#{{base05-hex}}
selection.alpha=80
# color for additional selections
#selection.additional.fore=
#selection.additional.back=
#selection.additional.alpha=256

# Whitespace, error, bookmark, etc.
whitespace.fore=#{{base02-hex}}
whitespace.back=
#error.marker.fore=#0000A0
#error.marker.back=#DADAFF
#bookmark.fore=#BE0000
#bookmark.back=#FFFFA0
#bookmark.alpha=
#find.mark=#0000FF
#find.mark.indicator=style:compositionthick,colour:#FFB700,under
highlight.current.word.colour=#{{base05-hex}}
highlight.current.word.indicator=style:straightbox,colour:#{{base0A-hex}},under,outlinealpha:100,fillalpha:40
#indicators.alpha=63
#find.indicator.incremental=style:compositionthick,colour:#FFB700,under


##################################################
# [theme.properties]
##################################################

tgray0=#{{base00-hex}}
tgray1=#{{base01-hex}}
tgray2=#{{base02-hex}}
tgray3=#{{base03-hex}}
tgray4=#{{base04-hex}}
tgray5=#{{base05-hex}}
tgray6=#{{base06-hex}}
tgray7=#{{base07-hex}}
tcol0=#{{base08-hex}}
tcol1=#{{base09-hex}}
tcol2=#{{base0A-hex}}
tcol3=#{{base0B-hex}}
tcol4=#{{base0C-hex}}
tcol5=#{{base0D-hex}}
tcol6=#{{base0E-hex}}
tcol7=#{{base0F-hex}}

tstyle.default=$(font.base),fore:#{{base05-hex}},back:#{{base00-hex}}
tstyle.linenumber=$(font.base),fore:#{{base04-hex}},back:#{{base01-hex}}
tstyle.whitespace=$(font.base),fore:$(whitespace.fore),back:#{{base00-hex}}
tstyle.comment.box=$(font.code.comment.box),fore:#{{base03-hex}},back:#{{base00-hex}}
tstyle.comment.line=$(font.code.comment.line),fore:#{{base03-hex}},back:#{{base00-hex}}
tstyle.comment.doc=$(font.code.comment.doc),fore:#{{base03-hex}},back:#{{base00-hex}}
tstyle.comment=$(tstyle.comment.line)

tstyle.calltips=$(font.code.comment.line),fore:#{{base03-hex}},back:#{{base00-hex}}
tstyle.keyword=$(font.base),fore:#{{base0E-hex}},back:#{{base00-hex}}
tstyle.operator=$(font.base),fore:#{{base05-hex}},back:#{{base00-hex}}
tstyle.number=$(font.base),fore:#{{base09-hex}},back:#{{base00-hex}}

tstyle.string.double=$(font.base),fore:#{{base0B-hex}},back:#{{base00-hex}}
tstyle.string.single=$(font.base),fore:#{{base0B-hex}},back:#{{base00-hex}}
tstyle.string.other=$(font.base),fore:#{{base0A-hex}},back:#{{base01-hex}}
tstyle.string=$(tstyle.string.double)
#tstyle.regex=$(font.base),fore:#{{base0A-hex}},back:#{{base01-hex}}


tstyle.match=$(font.base),bold,fore:#{{base0D-hex}},back:#{{base00-hex}}
tstyle.mismatch=$(font.base),bold,fore:#{{base00-hex}},back:#{{base08-hex}},eolfilled

# other
tstyle.variable=$(font.base),fore:#{{base08-hex}},back:#{{base00-hex}}
tstyle.class=$(font.base),fore:#{{base0A-hex}},back:#{{base00-hex}}
tstyle.support=$(font.base),fore:#{{base0C-hex}},back:#{{base00-hex}}
tstyle.function=$(font.base),fore:#{{base0D-hex}},back:#{{base00-hex}}
tstyle.unused=$(font.base),fore:#{{base0F-hex}},back:#{{base00-hex}}

tstyle.preprocessor=$(tstyle.class)

tstyle.extra.0=$(tstyle.class)
tstyle.extra.1=$(tstyle.support)
tstyle.extra.2=$(tstyle.function)
tstyle.extra.3=$(tstyle.variable)
tstyle.extra.4=$(tstyle.unused)

tstyle.label=$(font.base),fore:#{{base01-hex}},back:#{{base04-hex}}


##################################################
# [lang_all.properties]
##################################################

# Default
style.*.32=$(tstyle.default)
# Line number
style.*.33=$(tstyle.linenumber)
# Brace highlight
style.*.34=$(tstyle.match)
# Brace incomplete highlight
style.*.35=$(tstyle.mismatch)
# Control characters
style.*.36=
# Indentation guides
style.*.37=$(tstyle.whitespace)
# Calltips
style.*.38=$(tstyle.calltips)

# Whitespace/Default
style.*.0=$(tstyle.default)
# Block comment
style.*.1=$(tstyle.comment.box)
# Line comment
style.*.2=$(tstyle.comment.line)
# Doc comment
style.*.3=$(tstyle.comment.doc)
# Number
style.*.4=$(tstyle.number)
# Keyword
style.*.5=$(tstyle.keyword)
# Double quoted string
style.*.6=$(tstyle.string.double)
# Single quoted string
style.*.7=$(tstyle.string.single)
# Literal string
style.*.8=$(tstyle.string.other)
# Preprocessor
style.*.9=$(tstyle.preprocessor)
# Operators
style.*.10=$(tstyle.operator)
# Identifier (everything else...)
style.*.11=
# End of line where string is not closed
style.*.12=$(tstyle.mismatch)


##################################################
# [lang_bash.properties]
##################################################

# Default
style.bash.32=$(tstyle.default)
# White space
style.bash.0=$(tstyle.whitespace)
# Error
style.bash.1=$(tstyle.mismatch)
# Comment
style.bash.2=$(tstyle.comment)
# Number
style.bash.3=$(tstyle.number)
# Keyword
style.bash.4=$(tstyle.keyword)
# Double quoted string
style.bash.5=$(tstyle.string)
# Single quoted string
style.bash.6=$(tstyle.string)
# Operators
style.bash.7=$(tstyle.operator)
# Identifiers (functions, etc.)
style.bash.8=$(tstyle.function)
# Scalars: $var
style.bash.9=$(tstyle.variable)
# Parameter expansion: ${var}
style.bash.10=$(tstyle.class)
# Back Ticks
style.bash.11=$(tstyle.support)
# Here-doc (delimiter)
style.bash.12=$(tstyle.support)
# Here-doc (single quoted, q)
style.bash.13=$(tstyle.label)


##################################################
# [lang_batch.properties]
##################################################

# Default
style.batch.0=$(tstyle.default)
# Comment (rem or ::)
style.batch.1=$(tstyle.comment)
# Keywords
style.batch.2=$(tstyle.keyword)
# Label (line beginning with ':')
style.batch.3=$(tstyle.label)
# Hide command character ('@')
style.batch.4=$(tstyle.preprocessor)
# External commands
style.batch.5=$(tstyle.function)
# Variable: %%x (x is almost whatever, except space and %), %n (n in [0-9]), %EnvironmentVar%
style.batch.6=$(tstyle.variable)
# Operator: * ? < > |
style.batch.7=$(tstyle.operator)


##################################################
# [lang_cpp.properties]
##################################################

# Default
style.cpp.32=$(tstyle.default)
# White space
style.cpp.0=$(tstyle.whitespace)
# Comment: /* */.
style.cpp.1=$(tstyle.comment.box)
# Line Comment: //.
style.cpp.2=$(tstyle.comment.line)
# Doc comment: block comments beginning with /** or /*!
style.cpp.3=$(tstyle.comment.doc)
# Number
style.cpp.4=$(tstyle.number)
# Keyword
style.cpp.5=$(tstyle.keyword)
# String
style.cpp.6=$(tstyle.string.double)
# Character
style.cpp.7=$(tstyle.number)
# UUIDs (only in IDL)
style.cpp.8=$(tstyle.support)
# Preprocessor
style.cpp.9=$(tstyle.preprocessor)
# Operators
style.cpp.10=$(tstyle.operator)
# Identifiers
style.cpp.11=
# End of line where string is not closed
style.cpp.12=$(tstyle.mismatch)
# Verbatim strings for C#
style.cpp.13=$(tstyle.string.other)
# Regular expressions for JavaScript
style.cpp.14=$(tstyle.string.other)
# Doc Comment Line: line comments beginning with /// or //!.
style.cpp.15=$(tstyle.comment.doc)
# Keywords2
style.cpp.16=$(tstyle.support)
# Comment keyword
style.cpp.17=$(tstyle.function)
# Comment keyword error
style.cpp.18=$(tstyle.variable)
# Global class
style.cpp.19=$(tstyle.class)
# Raw strings for C++0x
style.cpp.20=$(tstyle.string.other)
# Triple-quoted strings for Vala
style.cpp.21=$(tstyle.string.other)
# Hash-quoted strings for Pike
style.cpp.22=$(tstyle.string.other)
# Preprocessor stream comment
style.cpp.23=$(tstyle.comment.box)
# Preprocessor stream doc comment
style.cpp.24=$(tstyle.comment.doc)
# User defined literals
style.cpp.25=$(tstyle.variable)
# Task Marker
style.cpp.26=$(tstyle.support)
# Escape sequence
style.cpp.27=$(tstyle.support)

# Inactive states are 64 greater than their active counterparts

# White space
style.cpp.64=$(style.cpp.0),back:#{{base01-hex}}
# Comment: /* */.
style.cpp.65=$(style.cpp.1),back:#{{base01-hex}}
# Line Comment: //.
style.cpp.66=$(style.cpp.2),back:#{{base01-hex}}
# Doc comment: block comments beginning with /** or /*!
style.cpp.67=$(style.cpp.3),back:#{{base01-hex}}
# Number
style.cpp.68=$(style.cpp.4),back:#{{base01-hex}}
# Keyword
style.cpp.69=$(style.cpp.5),back:#{{base01-hex}}
# Double quoted string
style.cpp.70=$(style.cpp.6),back:#{{base01-hex}}
# Single quoted string
style.cpp.71=$(style.cpp.7),back:#{{base01-hex}}
# UUIDs (only in IDL)
style.cpp.72=$(style.cpp.8),back:#{{base01-hex}}
# Preprocessor
style.cpp.73=$(style.cpp.9),back:#{{base01-hex}}
# Operators
style.cpp.74=$(style.cpp.10),back:#{{base01-hex}}
# Identifiers
style.cpp.75=$(style.cpp.11),back:#{{base01-hex}}
# End of line where string is not closed
style.cpp.76=$(style.cpp.12),back:#{{base01-hex}}
# Verbatim strings for C#
style.cpp.77=$(style.cpp.13),back:#{{base01-hex}}
# Regular expressions for JavaScript
style.cpp.78=$(style.cpp.14),back:#{{base01-hex}}
# Doc Comment Line: line comments beginning with /// or //!.
style.cpp.79=$(style.cpp.15),back:#{{base01-hex}}
# Keywords2
style.cpp.80=$(style.cpp.16),back:#{{base01-hex}}
# Comment keyword
style.cpp.81=$(style.cpp.17),back:#{{base01-hex}}
# Comment keyword error
style.cpp.82=$(style.cpp.18),back:#{{base01-hex}}
# Global class
style.cpp.83=$(style.cpp.19),back:#{{base01-hex}}
# Raw strings for C++0x
style.cpp.84=$(style.cpp.20),back:#{{base01-hex}}
# Triple-quoted strings for Vala
style.cpp.85=$(style.cpp.21),back:#{{base01-hex}}
# Hash-quoted strings for Pike
style.cpp.86=$(style.cpp.22),back:#{{base01-hex}}
# Preprocessor stream comment
style.cpp.87=$(style.cpp.23),back:#{{base01-hex}}
# Preprocessor stream doc comment
style.cpp.88=$(style.cpp.24),back:#{{base01-hex}}
# User defined literals
style.cpp.89=$(style.cpp.25),back:#{{base01-hex}}
# Task Marker
style.cpp.90=$(style.cpp.26),back:#{{base01-hex}}


##################################################
# [lang_lua.properties]
##################################################

#Default
style.lua.32=$(tstyle.default)
# White space: Visible only in View Whitespace mode (or if it has a back colour)
style.lua.0=$(tstyle.whitespace)
# Block comment (Lua 5.0)
style.lua.1=$(tstyle.comment.box)
# Line comment
style.lua.2=$(tstyle.comment.line)
# Doc comment -- Not used in Lua (yet?)
style.lua.3=$(tstyle.comment.doc)
# Number
style.lua.4=$(tstyle.number)
# Keyword
style.lua.5=$(tstyle.keyword)
# Double quoted string
style.lua.6=$(tstyle.string.double)
# Single quoted string
style.lua.7=$(tstyle.string.single)
# Literal string [=[...]=]
style.lua.8=$(tstyle.string.other)
# Preprocessor (obsolete in Lua 4.0 and up)
style.lua.9=$(tstyle.preprocessor)
# Operators
style.lua.10=$(tstyle.operator)
# Identifier (everything else...)
style.lua.11=
# End of line where string is not closed
style.lua.12=$(tstyle.mismatch)
# Other keywords (bozo test colors, but toned down ;)
style.lua.13=$(tstyle.function)
style.lua.14=$(tstyle.function)
style.lua.15=$(tstyle.function)
style.lua.16=$(tstyle.function)
style.lua.17=$(tstyle.function)
style.lua.18=$(tstyle.function)
style.lua.19=$(tstyle.function)
# Labels
style.lua.20=$(tstyle.label)


##################################################
# [lang_makefile.properties]
##################################################

# Default
style.makefile.0=$(tstyle.default)
# Comment: #
style.makefile.1=$(tstyle.comment)
# Pre-processor or other comment: !
style.makefile.2=$(tstyle.string)
# Variable: $(x)
style.makefile.3=$(tstyle.variable)
# Operator
style.makefile.4=$(tstyle.operator)
# Target
style.makefile.5=$(tstyle.keyword)
# Error
style.makefile.9=$(tstyle.mismatch)
# Matched Operators
style.makefile.34=$(tstyle.match)
style.makefile.35=$(tstyle.mismatch)


##################################################
# [lang_props.properties]
##################################################

# Default
style.props.0=$(tstyle.default)
# Comment
style.props.1=$(tstyle.comment)
# Section
style.props.2=$(tstyle.string)
# Assignment operator
style.props.3=$(tstyle.operator)
# Default value (@)
style.props.4=$(tstyle.preprocessor)
# Key
style.props.5=$(tstyle.keyword)
# Matched Operators
style.props.34=$(tstyle.matched)
style.props.35=$(tstyle.mismatched)


##################################################
# [lang_ruby.properties]
##################################################

# White space
style.ruby.0=$(tstyle.default)
# Error
style.ruby.1=$(tstyle.mismatch)
# Comment line
style.ruby.2=$(tstyle.comment)
# POD
style.ruby.3=fore:#00FF00
# Number
style.ruby.4=$(tstyle.number)
# Word
style.ruby.5=$(tstyle.keyword)
# String
style.ruby.6=$(tstyle.string)
# Character
style.ruby.7=$(tstyle.string)
# Class name
style.ruby.8=$(tstyle.class)
# Def name
style.ruby.9=$(tstyle.function)
# Operator
style.ruby.10=$(tstyle.operator)
# Identifier
style.ruby.11=
# Regex
style.ruby.12=$(tstyle.string.other),notbold
# Global
style.ruby.13=$(tstyle.class)
# Symbol
style.ruby.14=$(tstyle.support)
# MODULE_NAME
style.ruby.15=$(tstyle.class)
# INSTANCE_VAR
style.ruby.16=$(tstyle.variable)
# CLASS_VAR
style.ruby.17=$(tstyle.variable)
# BACKTICKS
style.ruby.18=$(tstyle.string.other),notbold
# DATASECTION
style.ruby.19=$(tstyle.comment.doc)
# HERE_DELIM
style.ruby.20=$(tstyle.string)
# HERE_Q
style.ruby.21=$(tstyle.support)
# HERE_QQ
style.ruby.22=$(tstyle.support)
# HERE_QX
style.ruby.23=$(tstyle.support)
# STRING_Q
style.ruby.24=$(tstyle.string)
# STRING_QQ
style.ruby.25=$(tstyle.string)
# STRING_QX
style.ruby.26=$(tstyle.string)
# STRING_QR
style.ruby.27=$(tstyle.string)
# STRING_QW
style.ruby.28=$(tstyle.string)
# Demoted Keyword
style.ruby.29=$(tstyle.keyword)
# STDIN
style.ruby.30=$(tstyle.variable)
# STDOUT
style.ruby.31=$(tstyle.variable)
# STDERR
style.ruby.40=$(tstyle.variable)
# SCE_RB_UPPER_BOUND allocated but unused
style.ruby.41=back:#00FF00

# Matched Operators
style.ruby.34=$(tstyle.match)
style.ruby.35=$(tstyle.mismatch)


##################################################
# [lang_yaml.properties]
##################################################

# Default
style.yaml.0=$(tstyle.default)
# comment line
style.yaml.1=$(tstyle.comment)
# value identifier
style.yaml.2=$(tstyle.variable)
# keyword value
style.yaml.3=$(tstyle.keyword)
# numerical value
style.yaml.4=$(tstyle.number)
# reference/repeating value
style.yaml.5=$(tstyle.class)
# document delimiting line
style.yaml.6=$(tstyle.mismatched)
# text block marker
style.yaml.7=$(tstyle.string)
# syntax error marker
style.yaml.8=$(tstyle.mismatched)
# operator
style.yaml.9=$(tstyle.operator)


##################################################
# [errorlist.properties]
##################################################

style.errorlist.32=$(tstyle.default)
# Default
style.errorlist.0=$(tstyle.default)
# python Error
#style.errorlist.1=fore:#FF0000
# gcc Error
#style.errorlist.2=fore:#800080
# Microsoft Error
#style.errorlist.3=fore:#808000
# command or return status
#style.errorlist.4=fore:#0000FF
# Borland error and warning messages
#style.errorlist.5=fore:#B06000
# perl error and warning messages
#style.errorlist.6=fore:#FF0000
# .NET tracebacks
#style.errorlist.7=fore:#FF0000
# Lua error and warning messages
#style.errorlist.8=fore:#FF0000
# ctags
#style.errorlist.9=fore:#FF00FF
# diff changed !
#style.errorlist.10=fore:#007F00
# diff addition +
#style.errorlist.11=fore:#00007F
# diff deletion -
#style.errorlist.12=fore:#007F7F
# diff message ---
#style.errorlist.13=fore:#7F0000
# PHP error
#style.errorlist.14=fore:#FF0000
# Essential Lahey Fortran 90 error
#style.errorlist.15=fore:#FF0000
# Intel Fortran Compiler error
#style.errorlist.16=fore:#FF0000
# Intel Fortran Compiler v8.0 error/warning
#style.errorlist.17=fore:#FF0000
# Absoft Pro Fortran 90/95 v8.2 error or warning
#style.errorlist.18=fore:#FF0000
# HTML Tidy
#style.errorlist.19=fore:#FF0000
# Java runtime stack trace
#style.errorlist.20=fore:#FF0000
# Text matched with find in files and message part of GCC errors
#style.errorlist.21=fore:#000000
# GCC showing include path to following error
#style.errorlist.22=fore:#800080
# Escape sequence
#style.errorlist.23=fore:#000000,notvisible,back:#FFFFFF,$(error.background)
# Escape sequence unknown
#style.errorlist.24=back:#FFE0A0
# Ensures that spacing is not affected by line number styles
#style.errorlist.33=$(font.small)
# Basic colours
#style.errorlist.40=fore:#000000,$(error.background)
#style.errorlist.41=fore:#800000,$(error.background)
#style.errorlist.42=fore:#008000,$(error.background)
#style.errorlist.43=fore:#808000,$(error.background)
#style.errorlist.44=fore:#000080,$(error.background)
#style.errorlist.45=fore:#800080,$(error.background)
#style.errorlist.46=fore:#008080,$(error.background)
#style.errorlist.47=fore:#A0A0A0,$(error.background)
# Intense colours
#style.errorlist.48=fore:#000000,bold,$(error.background)
#style.errorlist.49=fore:#800000,bold,$(error.background)
#style.errorlist.50=fore:#008000,bold,$(error.background)
#style.errorlist.51=fore:#808000,bold,$(error.background)
#style.errorlist.52=fore:#000080,bold,$(error.background)
#style.errorlist.53=fore:#800080,bold,$(error.background)
#style.errorlist.54=fore:#008080,bold,$(error.background)
#style.errorlist.55=fore:#A0A0A0,bold,$(error.background)


